// <auto-generated />
using System;
using Manntall.Backend.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Manntall.Backend.Migrations
{
    [DbContext(typeof(ManntallContext))]
    [Migration("20231026135229_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Manntall.Backend.Database.PersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Etternavn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("etternavn");

                    b.Property<string>("FolkeavstemningId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("folkeavstemning_id");

                    b.Property<int>("FolkeregisterStatus")
                        .HasColumnType("integer")
                        .HasColumnName("folkeregister_status");

                    b.Property<string>("Fornavn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fornavn");

                    b.Property<LocalDate>("Fødselsdato")
                        .HasColumnType("date")
                        .HasColumnName("fødselsdato");

                    b.Property<string>("Identifikasjonsnummer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identifikasjonsnummer");

                    b.Property<int>("Kjønn")
                        .HasColumnType("integer")
                        .HasColumnName("kjønn");

                    b.Property<string>("Manntallsnummer")
                        .HasColumnType("text")
                        .HasColumnName("manntallsnummer");

                    b.Property<string>("Mellomnavn")
                        .HasColumnType("text")
                        .HasColumnName("mellomnavn");

                    b.HasKey("Id")
                        .HasName("pk_person");

                    b.HasIndex("Identifikasjonsnummer")
                        .HasDatabaseName("ix_person_identifikasjonsnummer");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Identifikasjonsnummer"), new[] { "Manntallsnummer", "FolkeavstemningId" });

                    b.HasIndex("FolkeavstemningId", "Identifikasjonsnummer")
                        .HasDatabaseName("ix_person_folkeavstemning_id_identifikasjonsnummer");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("FolkeavstemningId", "Identifikasjonsnummer"), new[] { "Manntallsnummer" });

                    b.ToTable("person", (string)null);
                });

            modelBuilder.Entity("Manntall.Backend.Database.PersonEntity", b =>
                {
                    b.OwnsOne("Manntall.Backend.Database.Bostedsadresse", "Bostedsadresse", b1 =>
                        {
                            b1.Property<Guid>("PersonEntityId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Adressegradering")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("bostedsadresse_adressegradering");

                            b1.Property<string>("Adressenavn")
                                .HasColumnType("text")
                                .HasColumnName("bostedsadresse_adressenavn");

                            b1.Property<string>("Adressenummer")
                                .HasColumnType("text")
                                .HasColumnName("bostedsadresse_adressenummer");

                            b1.Property<string>("Adressetillegsnavn")
                                .HasColumnType("text")
                                .HasColumnName("bostedsadresse_adressetillegsnavn");

                            b1.Property<string>("Bruksenhetsnummer")
                                .HasColumnType("text")
                                .HasColumnName("bostedsadresse_bruksenhetsnummer");

                            b1.Property<string>("Bruksenhetstype")
                                .HasColumnType("text")
                                .HasColumnName("bostedsadresse_bruksenhetstype");

                            b1.Property<LocalDate?>("Flyttedato")
                                .HasColumnType("date")
                                .HasColumnName("bostedsadresse_flyttedato");

                            b1.Property<string>("Grunnkrets")
                                .HasColumnType("text")
                                .HasColumnName("bostedsadresse_grunnkrets");

                            b1.Property<string>("Kirkekrets")
                                .HasColumnType("text")
                                .HasColumnName("bostedsadresse_kirkekrets");

                            b1.Property<string>("Kommunenummer")
                                .HasColumnType("text")
                                .HasColumnName("bostedsadresse_kommunenummer");

                            b1.Property<string>("Postnummer")
                                .HasColumnType("text")
                                .HasColumnName("bostedsadresse_postnummer");

                            b1.Property<string>("Poststed")
                                .HasColumnType("text")
                                .HasColumnName("bostedsadresse_poststed");

                            b1.Property<string>("Skolekrets")
                                .HasColumnType("text")
                                .HasColumnName("bostedsadresse_skolekrets");

                            b1.Property<string>("Stemmekrets")
                                .HasColumnType("text")
                                .HasColumnName("bostedsadresse_stemmekrets");

                            b1.HasKey("PersonEntityId");

                            b1.ToTable("person");

                            b1.WithOwner()
                                .HasForeignKey("PersonEntityId")
                                .HasConstraintName("fk_person_person_id");
                        });

                    b.OwnsOne("Manntall.Backend.Database.DigitalKontaktData", "DigitalKontakt", b1 =>
                        {
                            b1.Property<Guid>("PersonEntityId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Epostadresse")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("digital_kontakt_epostadresse");

                            b1.Property<string>("Mobiltelefonnummer")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("digital_kontakt_mobiltelefonnummer");

                            b1.Property<string>("Språk")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("digital_kontakt_språk");

                            b1.HasKey("PersonEntityId");

                            b1.ToTable("person");

                            b1.WithOwner()
                                .HasForeignKey("PersonEntityId")
                                .HasConstraintName("fk_person_person_id");
                        });

                    b.OwnsOne("Manntall.Backend.Database.PostboksAdresse", "PostboksAdresse", b1 =>
                        {
                            b1.Property<Guid>("PersonEntityId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Adressegradering")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("postboks_adresse_adressegradering");

                            b1.Property<string>("Eier")
                                .HasColumnType("text")
                                .HasColumnName("postboks_adresse_eier");

                            b1.Property<string>("Postboks")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("postboks_adresse_postboks");

                            b1.Property<string>("Postnummer")
                                .HasColumnType("text")
                                .HasColumnName("postboks_adresse_postnummer");

                            b1.Property<string>("Poststed")
                                .HasColumnType("text")
                                .HasColumnName("postboks_adresse_poststed");

                            b1.HasKey("PersonEntityId");

                            b1.ToTable("person");

                            b1.WithOwner()
                                .HasForeignKey("PersonEntityId")
                                .HasConstraintName("fk_person_person_id");
                        });

                    b.OwnsOne("Manntall.Backend.Database.VegadresseForPost", "VegadresseForPost", b1 =>
                        {
                            b1.Property<Guid>("PersonEntityId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Adressegradering")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("vegadresse_for_post_adressegradering");

                            b1.Property<string>("Adressenavn")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("vegadresse_for_post_adressenavn");

                            b1.Property<string>("Adressenummer")
                                .HasColumnType("text")
                                .HasColumnName("vegadresse_for_post_adressenummer");

                            b1.Property<string>("Bruksenhetsnummer")
                                .HasColumnType("text")
                                .HasColumnName("vegadresse_for_post_bruksenhetsnummer");

                            b1.Property<string>("CoAdressenavn")
                                .HasColumnType("text")
                                .HasColumnName("vegadresse_for_post_co_adressenavn");

                            b1.Property<string>("Postnummer")
                                .HasColumnType("text")
                                .HasColumnName("vegadresse_for_post_postnummer");

                            b1.Property<string>("Poststed")
                                .HasColumnType("text")
                                .HasColumnName("vegadresse_for_post_poststed");

                            b1.HasKey("PersonEntityId");

                            b1.ToTable("person");

                            b1.WithOwner()
                                .HasForeignKey("PersonEntityId")
                                .HasConstraintName("fk_person_person_id");
                        });

                    b.Navigation("Bostedsadresse");

                    b.Navigation("DigitalKontakt");

                    b.Navigation("PostboksAdresse");

                    b.Navigation("VegadresseForPost");
                });
#pragma warning restore 612, 618
        }
    }
}
